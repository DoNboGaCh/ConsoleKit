{"name":"Consolekit","body":"In *cli.php*:\r\n\r\n    <?php\r\n\r\n    class HelloCommand extends ConsoleKit\\Command\r\n    {\r\n        public function execute(array $args, array $options = array())\r\n        {\r\n            $this->writeln('hello world!', ConsoleKit\\Colors::GREEN);\r\n        }\r\n    }\r\n\r\n    $console = new ConsoleKit\\Console();\r\n    $console->addCommand('HelloCommand');\r\n    $console->run();\r\n\r\nIn the shell:\r\n    \r\n    $ php cli.php hello\r\n    hello world!\r\n\r\nMore examples in [example.php](https://github.com/maximebf/ConsoleKit/blob/master/example.php)\r\n\r\n# Installation\r\n\r\nThe easiest way to install ConsoleKit is using [Composer](https://github.com/composer/composer)\r\nwith the following requirement:\r\n\r\n    {\r\n        \"require\": {\r\n            \"maximebf/consolekit\": \">=1.0.0\"\r\n        }\r\n    }\r\n\r\nAlternatively, you can [download the archive](https://github.com/maximebf/ConsoleKit/zipball/master) \r\nand add the lib/ folder to PHP's include path:\r\n\r\n    set_include_path('/path/to/lib' . PATH_SEPARATOR . get_include_path());\r\n\r\nConsoleKit does not provide an autoloader but follows the [PSR-0 convention](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md).  \r\nYou can use the following snippet to autoload ConsoleKit classes:\r\n\r\n    spl_autoload_register(function($className) {\r\n        if (substr($className, 0, 10) === 'ConsoleKit') {\r\n            $filename = str_replace('\\\\', DIRECTORY_SEPARATOR, trim($className, '\\\\')) . '.php';\r\n            require_once $filename;\r\n        }\r\n    });\r\n\r\n# Usage\r\n\r\n## Options parser\r\n\r\nThe default options parser parses an argv-like array.\r\nItems can be of the form:\r\n\r\n -  --key=value\r\n -  --key\r\n -  -a\r\n -  -ab (equivalent of -a -b)\r\n\r\nWhen an option has no value, true will be used. If multiple key/value pairs\r\nwith the same key are specified, the \"key\" value will be an array containing all the values.  \r\nIf \"--\" is detected, all folowing values will be treated as a single argument\r\n\r\nExample: the string \"-a -bc --longopt --key=value arg1 arg2 -- --any text\" will produce the following two arrays:\r\n\r\n    $args = array('arg1', 'arg2', '--any text');\r\n    $options = array('a' => true, 'b' => true, 'c' => true, 'longopt' => true, 'key' => 'value');\r\n\r\n## Creating commands\r\n\r\nAny callbacks can be a command. It will receive three parameters: the \r\narguments array, the options array and the console object.\r\n\r\n    function my_command($args, $opts, $console) {\r\n        $console->writeln(\"hello world!\");\r\n    }\r\n\r\nCommands can also be defined as classes. In this case, they must inherit from `ConsoleKit\\Command`\r\nand override the `execute()` method.\r\n\r\n    class MyCommand extends ConsoleKit\\Command {\r\n        public function execute(array $args, array $opts) {\r\n            $this->writeln(\"hello world!\");\r\n        }\r\n    }\r\n\r\nThe `ConsoleKit\\Command` class offers helper methods, check it out for more info.\r\n\r\n## Registering commands\r\n\r\nCommands need to be registered in the console object using the `addCommand()` method (or `addCommands()`).\r\n\r\n    $console = new ConsoleKit\\Console();\r\n    $console->addCommand('my_command'); // the my_command function\r\n    $console->addCommand('MyCommand'); // the MyCommand class\r\n    $console->addCommand(function() { echo 'hello!'; }, 'hello'); // using a closure\r\n    // or:\r\n    $console->addCommand('hello', function() { echo 'hello!'; }); // alternative when using a closure\r\n\r\nNotice that in the last example we have provided a second argument which is an alias for a command.\r\nAs closures have no name, one must be specified.\r\n\r\nThe command name for functions is the same as the function name with underscores replaced \r\nby dashes (ie. my\\_command becomes my-command).\r\n\r\nThe command name for command classes is the short class name without the `Command` \r\nsuffix and \"dashized\" (ie. HelloWorldCommand becomes hello-world).\r\n\r\n## Running\r\n\r\nSimply call the `run()` method of the console object\r\n\r\n    $console->run();\r\n    $console->run(array('custom arg1', 'custom arg2')); // overrides $_SERVER['argv']\r\n\r\n## Automatic help generation\r\n\r\nThe *help* command is automatically registered and provides help about available methods based on doc comments.  \r\nCheck out [example.php](https://github.com/maximebf/ConsoleKit/blob/master/example.php) for example of available tags\r\n\r\n    $ php myscript.php help\r\n\r\n# Formating text\r\n\r\n## Colors\r\n\r\nThe `ConsoleKit\\Colors::colorize()` method provides an easy way to colorize a text. \r\nColors are defined as either a string or an integer (through constants of the `Colors` class).  \r\nAvailable colors: black, red, green, yellow, blue, magenta, cyan, white.\r\n\r\nForeground colors are also available in a \"bold\" variant. Suffix the color name with \"+bold\" or use the OR bit operator with constants.\r\n\r\n    echo Colors::colorize('my red text', Colors::RED);\r\n    echo Colors::colorize('my red text', 'red');\r\n    \r\n    echo Colors::colorize('my red bold text', Colors::RED | Colors::BOLD);\r\n    echo Colors::colorize('my red bold text', 'red+bold');\r\n    \r\n    echo Colors::colorize('my red text over yellow background', Colors::RED, Colors::YELLOW);\r\n   \r\n## TextFormater\r\n\r\nThe `ConsoleKit\\TextFormater` class allows you to format text using the following options:\r\n\r\n -  indentation using `setIndent()` or the *indent* option\r\n -  quoting using `setQuote()` or the *quote* option\r\n -  foreground color using `setFgColor()` or the *fgcolor* option\r\n -  background color using `setBgColor()` or the *bgcolor* option\r\n\r\nOptions can be defined using `setOptions()` or as the first parameter of the constructor.\r\n\r\n    $formater = new ConsoleKit\\TextFormater(array('quote' => ' > '));\r\n    echo $formater->format(\"hello!\");\r\n    // produces: \" > hello\"\r\n    \r\n# Widgets\r\n\r\n## Dialog\r\n\r\nUsed to interact with the user\r\n\r\n    $dialog = new ConsoleKit\\Widgets\\Dialog($console);\r\n    $name = $dialog->ask('What is your name?');\r\n    if ($dialog->confirm('Are you sure?')) {\r\n        $console->writeln(\"hello $name\");\r\n    }\r\n    \r\n## Box\r\n\r\nWraps text in a box\r\n\r\n    $box = new ConsoleKit\\Widgets\\Box($console, 'my text');\r\n    $box->write();\r\n    \r\nProduces:\r\n\r\n    ********************************************\r\n    *                 my text                  *\r\n    ********************************************\r\n\r\n## Progress bar\r\n\r\nDisplays a progress bar\r\n\r\n    $total = 100;\r\n    $progress = new ConsoleKit\\Widgets\\ProgressBar($console, $total);\r\n    for ($i = 0; $i < $total; $i++) {\r\n        $progress->incr();\r\n        usleep(10000);\r\n    }\r\n    $progress->stop();\r\n    \r\n","tagline":"PHP 5.3 library to create command line utilities","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}